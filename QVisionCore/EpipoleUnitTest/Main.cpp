#include <cstdio>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/features2d/features2d.hpp>

using namespace std;
using namespace cv;

const int box1X[] = {
    1,    94,    95,   110,   115,   124,   126,   126,   127,   131,
  131,   134,   136,   136,   139,   139,   139,   140,   141,   141,
  142,   142,   143,   144,   144,   144,   145,   145,   146,   146,
  146,   147,   147,   147,   148,   148,   149,   149,   149,   149,
  150,   151,   151,   151,   151,   152,   152,   153,   153,   154,
  155,   155,   155,   155,   155,   156,   156,   157,   157,   157,
  157,   158,   158,   158,   159,   159,   159,   159,   160,   160,
  160,   161,   161,   162,   162,   162,   163,   163,   163,   164,
  165,   165,   165,   166,   167,   168,   168,   168,   168,   169,
  169,   169,   169,   170,   170,   170,   172,   172,   173,   173,
  173,   173,   173,   173,   174,   174,   174,   174,   174,   176,
  176,   177,   178,   178,   178,   178,   179,   180,   181,   181,
  181,   182,   183,   184,   184,   185,   185,   186,   187,   187,
  187,   187,   188,   190,   190,   190,   191,   191,   192,   194,
  194,   194,   194,   195,   195,   197,   197,   197,   197,   197,
  198,   198,   200,   200,   200,   200,   201,   201,   201,   203,
  203,   203,   203,   204,   204,   204,   204,   205,   206,   207,
  207,   207,   207,   208,   208,   208,   210,   210,   210,   210,
  210,   210,   212,   212,   212,   212,   213,   213,   213,   213,
  214,   214,   215,   215,   215,   215,   215,   215,   216,   216,
  216,   217,   217,   218,   218,   219,   219,   219,   219,   220,
  220,   220,   221,   221,   222,   222,   222,   223,   223,   223,
  225,   225,   225,   225,   227,   227,   228,   228,   229,   229,
  229,   230,   231,   232,   232,   232,   232,   233,   233,   234,
  234,   234,   235,   235,   235,   235,   235,   236,   236,   237,
  237,   238,   238,   238,   238,   239,   239,   239,   240,   240,
  241,   242,   243,   243,   245,   245,   246,   248,   248,   248,
  248,   248,   249,   249,   249,   250,   250,   251,   251,   253,
  253,   253,   253,   254,   254,   255,   255,   255,   255,   256,
  256,   258,   259,   259,   260,   261,   261,   261,   262,   263,
  263,   264,   264,   265,   266,   267,   267,   267,   269,   269,
  269,   270,   270,   272,   272,   272,   272,   273,   274,   274,
  275,   275,   278,   278,   279,   280,   280,   281,   281,   281,
  281,   282,   282,   283,   283,   284,   284,   286,   287,   287,
  287,   288,   288,   288,   289,   292,   297,   297,   312,   314,
  319,   319,   320,   323,   323,   326,   327,   332,   333,   333,
  341,   343,   346,   351,   351,   352,   352,   353,   354,   354,
  361,   361,   362,   363,   368,   369,   370,   370,   370,   371,
  371,   373,   374,   374,   375,   375,   376,   376,   378,   378,
  379,   379,   380,   380,   381,   384,   385,   388,   395,   396,
  399,   411,   417,   419,   421,   423,   423,   424,   425,   428,
  428,   432,   433,   434,   435,   436,   440,   440,   441,   444,
  444,   444,   446,   449,   453,   455,   458,   459,   460,   461,
  463,   463,   466,   466,   468,   469,   471,   472,   472,   474,
  474,   475,   477,   479,   482,   482,   486,   486,   486,   487,
  492,   492,   494,   495,   498,   498,   499,   501,   502,   505,
  505,   506,   511,   511,   517,   519,   520,   521,   521,   522,
  523,   525,   528,   529,   539,   540,   545,   545,   546,   548,
  549,   550,   550,   551,   554,   554,   558,   561,   563,   566
};

const int box1Y[] = {
    1,   113,   116,   113,    14,   150,   152,   164,   161,    76,
  176,   177,    71,   153,    73,   228,   239,   270,   163,   230,
  234,   252,   267,    73,   165,   237,   176,   269,   115,   144,
  147,   184,   239,   272,   292,   415,   267,   272,   274,   298,
  108,   114,   294,   307,   311,   117,   160,   274,   298,   181,
  259,   293,   295,   310,   340,   276,   334,   177,   192,   231,
  281,   169,   186,   293,   167,   212,   240,   310,   146,   205,
  281,   259,   326,   219,   297,   334,   167,   294,   320,   160,
  243,   326,   335,   338,   252,   231,   259,   281,   298,   239,
  285,   310,   340,   168,   182,   261,   237,   310,   161,   176,
  183,   286,   290,   313,   146,   240,   257,   294,   297,   152,
  261,   299,   167,   237,   242,   253,   257,   231,   164,   261,
  340,   356,   299,   159,   338,   183,   319,   342,   150,   183,
  312,   315,   292,   231,   254,   262,   166,   313,   284,   108,
  151,   231,   340,   178,   318,   106,   175,   252,   273,   301,
  112,   238,   151,   254,   275,   335,   178,   184,   320,   151,
  160,   167,   298,   280,   296,   326,   340,   145,   326,   105,
  111,   334,   337,   231,   259,   310,   108,   149,   231,   238,
  320,   337,   152,   167,   273,   339,   164,   237,   314,   321,
  178,   300,   143,   145,   231,   243,   292,   297,   147,   150,
  160,   179,   237,   172,   340,   272,   295,   300,   338,   276,
  318,   322,   326,   334,   167,   295,   300,   159,   183,   292,
  145,   257,   292,   310,   163,   273,   160,   168,   278,   281,
  321,   310,   150,   255,   259,   275,   321,   183,   280,   258,
  273,   340,    13,   162,   252,   310,   313,   174,   284,   331,
  338,   152,   166,   174,   239,    12,   150,   333,   250,   340,
  162,   339,   174,   180,   175,   180,   238,   152,   232,   276,
  281,   318,   161,   178,   279,   165,   176,   334,   337,   149,
  161,   276,   282,   144,   180,   229,   237,   241,   313,   335,
  337,   262,   143,   177,   232,   151,   177,   336,   314,   183,
  259,   174,   334,   165,   339,   252,   263,   334,   260,   321,
  340,   311,   314,   239,   260,   334,   343,   339,   147,   322,
  163,   314,   336,   341,   326,   237,   240,   152,   310,   334,
  343,   113,   414,   110,   239,   104,   237,   104,   144,   234,
  240,   113,   160,   165,   107,   266,   258,   263,   260,   316,
  272,   332,   261,   272,   343,   274,   269,   238,   276,   285,
  206,   273,   342,   289,   332,   214,   268,   321,   278,   293,
  187,   286,   212,   193,   273,   269,   104,   107,   282,   111,
  273,   282,   287,   291,   112,   263,   214,   259,   122,   327,
  105,   237,   103,   234,   284,   267,   353,   155,   271,   309,
  186,   219,   232,   305,   250,   237,   289,   185,   234,   234,
  243,   156,   252,   343,   244,   231,   241,   245,   249,   227,
  231,   249,   122,   309,   294,   242,   230,   104,   251,   261,
  233,   241,   112,   241,   229,   410,   112,   105,   250,   107,
  110,   240,   334,   237,   230,   332,   122,   224,   232,   228,
   32,   242,   245,   306,   239,   410,   235,   227,   239,   229,
  237,   242,    73,   224,   412,   410,   220,   243,   283,   301,
  305,   393,   122,   348,   308,    32,    34,   269,   240,   106,
   14,   234,   238,   107,   101,   110,   122,   107,   124,   108
};

const int box2X[] = {
    1,   131,    94,   104,    75,   116,   118,   118,   119,   156,
  126,   180,   163,   126,   162,   130,   131,   132,   172,   132,
  133,   133,   135,   168,   133,   169,   170,   136,   133,   148,
  134,   204,   172,   138,   201,   144,   139,   140,   182,   202,
  136,   137,   204,   174,   132,   138,   168,   144,   205,   141,
  168,   207,   182,   146,   173,   227,   147,   111,   140,   171,
  227,   144,   144,   148,   145,   146,   218,   150,   145,   147,
  230,   149,   151,   148,   179,   179,   148,   230,   153,   188,
  152,   154,   155,   200,   150,   164,   155,   155,   156,   155,
  157,   157,   185,   153,   122,   157,   230,   160,   197,   156,
  155,   160,   159,   160,   156,   169,   215,   170,   182,   158,
  239,   185,   161,   162,   214,   163,   164,   187,   162,   166,
  197,   170,   193,   121,   171,   169,   171,   172,   167,   256,
  173,   172,   229,   189,   172,   173,   155,   176,   175,   247,
  214,   249,   225,   175,   179,   176,   176,   220,   234,   180,
  176,   216,   243,   146,   226,   223,   180,   180,   184,   181,
  180,   181,   185,   163,   226,   187,   187,   182,   189,   184,
  183,   190,   190,   187,   188,   217,   186,   218,   146,   189,
  192,   188,   231,   252,   192,   194,   243,   192,   239,   195,
  163,   194,   234,   168,   193,   219,   236,   195,   192,   234,
  191,   193,   195,   193,   199,   198,   240,   199,   200,   199,
  200,   200,   201,   202,   216,   242,   201,   209,   198,   244,
  199,   166,   189,   204,   211,   205,   235,   193,   207,   206,
  208,   209,   204,   219,   208,   209,   211,   207,   210,   178,
  202,   213,   296,   188,   211,   213,   213,   201,   212,   215,
  240,   218,   211,   211,   213,   300,   166,   218,   214,   218,
  213,   220,   215,   215,   217,   217,   219,   209,   221,   252,
  223,   239,   220,   205,   224,   221,   205,   228,   228,   223,
  257,   227,   227,   223,   224,   256,   227,   227,   230,   232,
  232,   231,   218,   229,   187,   230,   231,   236,   236,   258,
  235,   233,   239,   257,   216,   238,   239,   241,   240,   243,
  244,   243,   243,   242,   243,   246,   247,   247,   241,   247,
  243,   248,   251,   251,   251,   249,   250,   247,   253,   253,
  254,   248,   342,   248,   252,   250,   253,   252,   253,   255,
  256,   253,   254,   254,   254,   261,   265,   265,   278,   283,
  285,   288,   285,   289,   292,   292,   292,   296,   299,   299,
  303,   307,   314,   315,   318,   314,   346,   318,   295,   319,
  321,   357,   323,   323,   331,   332,   329,   328,   333,   328,
  334,   336,   309,   339,   332,   337,   335,   304,   335,   344,
  336,   340,   336,   340,   312,   312,   351,   346,   325,   359,
  357,   370,   376,   381,   380,   382,   385,   381,   385,   387,
  388,   388,   393,   397,   395,   397,   399,   400,   401,   403,
  403,   404,   400,   411,   415,   414,   416,   413,   420,   421,
  422,   422,   420,   425,   407,   407,   425,   426,   431,   428,
  428,   435,   443,   438,   441,   446,   440,   428,   469,   427,
  554,   452,   453,   458,   458,   478,   459,   460,   462,   465,
  466,   466,   556,   471,   487,   489,   481,   483,   485,   490,
  487,   495,   484,   495,   503,   608,   613,   506,   512,   521,
  619,   516,   473,   508,   517,   511,   516,   519,   525,   528
};

const int box2Y[] = {
    1,   110,   114,   111,    42,   145,   147,   158,   155,    75,
  142,   146,    70,   149,    73,   216,   226,   254,   148,   218,
  222,   238,   251,    73,   160,   228,   160,   253,   115,   156,
  144,   156,   231,   256,   246,   385,   252,   257,   232,   252,
  109,   115,   248,   262,   257,   118,   145,   258,   252,   175,
  285,   247,   228,   291,   268,   306,   312,   215,   165,   224,
  310,   165,   180,   276,   163,   203,   255,   293,   145,   197,
  310,   246,   306,   209,   230,   263,   164,   251,   300,   147,
  232,   306,   315,   270,   313,   223,   247,   267,   282,   229,
  270,   293,   269,   165,   160,   249,   184,   293,   161,   172,
  175,   272,   275,   296,   145,   231,   252,   280,   248,   151,
  241,   250,   165,   228,   257,   242,   246,   297,   162,   250,
  272,   336,   237,   169,   320,   165,   304,   324,   150,   172,
  297,   300,   230,   226,   244,   252,   177,   298,   272,   117,
  155,   233,   330,   179,   303,   110,   173,   268,   231,   288,
  116,   235,   157,   261,   232,   270,   175,   181,   305,   152,
  160,   166,   286,   269,   253,   311,   324,   146,   312,   110,
  116,   319,   322,   226,   251,   320,   113,   151,   239,   233,
  308,   284,   171,   159,   264,   324,   155,   232,   309,   308,
  176,   289,   154,   174,   226,   311,   250,   286,   149,   156,
  161,   179,   233,   172,   326,   264,   254,   289,   324,   268,
  306,   310,   313,   320,   170,   254,   290,   148,   183,   251,
  148,   248,   297,   299,   165,   266,   166,   168,   271,   273,
  310,   300,   153,   232,   253,   267,   310,   184,   273,   269,
  283,   328,    15,   163,   247,   300,   304,   175,   277,   320,
  331,   170,   168,   176,   236,    14,   178,   323,   246,   329,
  165,   328,   176,   182,   177,   182,   236,   155,   230,   236,
  276,   314,   164,   179,   273,   168,   177,   325,   328,   154,
  152,   271,   277,   149,   183,   231,   235,   239,   306,   326,
  328,   259,   148,   180,   244,   156,   180,   328,   307,   244,
  256,   178,   326,   158,   328,   250,   261,   326,   258,   316,
  333,   306,   309,   238,   258,   327,   336,   332,   154,   316,
  168,   309,   330,   334,   321,   238,   241,   159,   306,   328,
  337,   122,   417,   119,   240,   114,   238,   114,   152,   236,
  241,   122,   167,   171,   117,   266,   259,   264,   263,   316,
  275,   332,   265,   276,   343,   277,   273,   244,   279,   289,
  215,   279,   345,   295,   336,   223,   273,   325,   288,   299,
  198,   292,   222,   204,   282,   277,   119,   122,   291,   126,
  282,   291,   299,   301,   127,   273,   225,   271,   137,   335,
  121,   248,   119,   245,   295,   279,   361,   171,   287,   320,
  201,   235,   247,   319,   265,   253,   304,   202,   250,   250,
  260,   174,   269,   358,   262,   248,   259,   263,   267,   246,
  250,   267,   142,   328,   313,   262,   251,   126,   271,   281,
  253,   262,   134,   262,   250,   426,   134,   127,   272,   129,
  132,   262,   356,   259,   253,   355,   145,   248,   255,   251,
   44,   265,   269,   331,   264,   438,   259,   252,   264,   254,
  260,   268,    46,   250,   441,   440,   247,   270,   311,   352,
  333,   418,   148,   393,   357,    46,    48,   331,   258,    81,
   26,   253,   254,   134,   128,   138,   150,   135,    88,   134
};

#define MAX_N (sizeof(box1X) / sizeof(box1X[0]))

static inline void keypointPreload(vector<cv::KeyPoint> &keypoints,
								   const int x[], const int y[])
{
	// keypoint1 setting
	for (int i = 0; i < MAX_N; i++) {
		Point2f &pt = keypoints[i].pt;

		pt.x = static_cast<float>(x[i]);
		pt.y = static_cast<float>(y[i]);
	}
}

#include "QImageMatcher.h"
#include "QImageEpipol.h"

const Mat K =
	(Mat_<double>(3, 3) << 674.79288, 0, 347.50762, 0, 684.737, 238.9042, 0, 0, 1);

static Mat qGetReconstructed3DPoints(Mat &P0, Mat &P1, vector<Point2d> &points1norm, vector<Point2d> &points2norm)
{
	Mat Q;

	qTriangulatePoints(P0, P1, Mat(points1norm), Mat(points2norm), Q);
	Q.row(0) /= Q.row(3);
	Q.row(1) /= Q.row(3);
	Q.row(2) /= Q.row(3);

	return Q;
}

int main()
{
	int count = 0;
	vector<cv::KeyPoint> keypoints1(MAX_N);
	vector<cv::KeyPoint> keypoints2(MAX_N);

	vector<cv::DMatch> putativeMatches(MAX_N);

	keypointPreload(keypoints1, box1X, box1Y);
	keypointPreload(keypoints2, box2X, box2Y);

	for (int i = 0; i < MAX_N; i++) {
		cv::DMatch &match = putativeMatches[i];
		match.queryIdx = match.trainIdx = i;
	}

	vector<cv::DMatch> matches;
	RobustMatcher rmatcher;
	Mat F = rmatcher.ransacTest(putativeMatches, keypoints1, keypoints2, matches);

	// show the matched points
	Mat image1 = imread("box01.JPG");
	Mat image2 = imread("box02.JPG");
	Mat imageMatches;
	cv::drawMatches(image1, keypoints1,  // 1st image and its keypoints
					image2, keypoints2,  // 2nd image and its keypoints
					matches,			// the matches
					imageMatches,		// the image produced
					cv::Scalar(255,255,255)); // color of the lines
	namedWindow("Matches");
	imshow("Matches", imageMatches);

	size_t matchSize = matches.size();
	vector<Point2d> points1(matchSize);
	vector<Point2d> points2(matchSize);

	for (size_t i = 0; i < matchSize; i++) {
		points1[i] = keypoints1[matches[i].queryIdx].pt;
		points2[i] = keypoints2[matches[i].trainIdx].pt;
	}

	F = qFindFundamentalMat8Point(Mat(points1), Mat(points2));

	// draw lines on image2
	std::vector<cv::Vec3f> lines;
	for (size_t i = 0; i < matchSize; i++) {
		vector<Point2f> cvPts;
		cvPts.push_back(points1[i]);
		qGetEpilines(cvPts, true, F, lines);
	}

	vector<Vec3f>::const_iterator it = lines.begin();
	for (; it != lines.end(); ++it) {
		// ax + by + c = 0;
		float a = (*it)[0];
		float b = (*it)[1];
		float c = (*it)[2];

		 cv::line(image2,
			cv::Point(0, int(-c / b + 0.5f)),
			cv::Point(image2.cols, int(-(c + a * image2.cols) / b + 0.5f)),
			cv::Scalar(0, 255, 0), 1, CV_AA);
	}
	namedWindow("box2");
	imshow("box2", image2);

	lines.clear();
	// draw lines on image1
	for (size_t i = 0; i < matchSize; i++) {
		vector<Point2f> cvPts;
		cvPts.push_back(points2[i]);
		qGetEpilines(cvPts, false, F, lines);
	}

	it = lines.begin();
	for (; it != lines.end(); ++it) {
		// ax + by + c = 0;
		float a = (*it)[0];
		float b = (*it)[1];
		float c = (*it)[2];

		 cv::line(image1,
			cv::Point(0, int(-c / b + 0.5f)),
			cv::Point(image1.cols, int(-(c + a * image1.cols) / b + 0.5f)),
			cv::Scalar(0, 255, 0), 1, CV_AA);
	}
	namedWindow("box1");
	imshow("box1", image1);

	Mat E = K.t() * F * K;
	Mat R1, R2, t;
	qDecomposeEssentialMat(E, R1, R2, t);

	Mat P0 = Mat::eye(3, 4, R1.type());

	vector<Point2d> points1norm(matchSize);
	vector<Point2d> points2norm(matchSize);

	double x, y;
	Mat invK = K.inv();
	for (size_t i = 0; i < matchSize; i++) {
		x = points1[i].x;
		y = points1[i].y;
		points1norm[i].x = invK.at<double>(0, 0) * x + invK.at<double>(0, 1) * y + invK.at<double>(0, 2);
		points1norm[i].y = invK.at<double>(1, 0) * x + invK.at<double>(1, 1) * y + invK.at<double>(1, 2);

		x = points2[i].x;
		y = points2[i].y;
		points2norm[i].x = invK.at<double>(0, 0) * x + invK.at<double>(0, 1) * y + invK.at<double>(0, 2);
		points2norm[i].y = invK.at<double>(1, 0) * x + invK.at<double>(1, 1) * y + invK.at<double>(1, 2);
	}

	Mat P1 = qGetProjectionMat(R1, R2, t, points1norm, points2norm);
	Mat Q = qGetReconstructed3DPoints(P0, P1, points1norm, points2norm);

	FILE *fp = fopen("3D_visualization.m", "w");

	// X
	fprintf(fp, "X = [0 ");
	for (int i = 0; i < matchSize; i++)
		fprintf(fp, " %f", Q.at<double>(0, i));
	fprintf(fp, "];\n");

	// Y
	fprintf(fp, "Y = [0 ");
	for (int i = 0; i <matchSize; i++)
		fprintf(fp, " %f", Q.at<double>(1, i));
	fprintf(fp, "];\n");

	// Z
	fprintf(fp, "Z = [0 ");
	for (int i = 0; i < matchSize; i++)
		fprintf(fp, " %f", Q.at<double>(2, i));
	fprintf(fp, "];\n");

	char *scatterCmd = "C = repmat([0, 0, 0],numel(X), 1);\n"
		"C(1, :) = [0 1 0];\n"
		"scatter3(X, Y, Z, 9, C, 'fill');\n"
		"xlabel('X');ylabel('Y');zlabel('Z');"
		"hold on\n;"
		"t = [0:0.1:0.5];\n;"
		"plot3(t, 0 * t, 0 * t, '-b', 'LineWidth', 2)\n;"
		"plot3(0 * t, t, 0 * t, '-r', 'LineWidth', 2)\n;"
		"hold off;";

	fprintf(fp, "%s\n", scatterCmd);
	fclose(fp);

	waitKey();

	return 0;
}

